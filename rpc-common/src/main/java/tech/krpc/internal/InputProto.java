// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal.proto

package tech.krpc.internal;

import java.io.IOException;
import java.io.InputStream;

import tech.krpc.common.proto.MiniCodedInputStream;
import tech.krpc.common.proto.StreamDecoder;
import lombok.extern.slf4j.Slf4j;

/**
 * Protobuf type {@code tech.krpc.internal.InputProto}
 */
@Slf4j
public final class InputProto
    //    extends
    //com.google.protobuf.GeneratedMessageV3
         implements
    // @@protoc_insertion_point(message_implements:tech.krpc.internal.InputProto)
    InputProtoOrBuilder {
//private static final long serialVersionUID = 0L;
  // Use InputProto.newBuilder() to construct.
  private InputProto() {
    e_ = 0;
  }

  public InputProto(InputStream in)  throws IOException {
    this();
    var size = in.available();
    if(size == 0){
      in.close();
      return;
    }
    log.debug("InputProto from  InputStream size {}",size);
    //// proto swell factor
    try (var input = new StreamDecoder(in, size)) {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            e_ = rawValue;
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();
            dataCase_ = 2;
            data_ = s;
            break;
          }
          case 26: {
            dataCase_ = 3;
            data_ = input.readBytes();
            break;
          }
          default: {
            //if (!parseUnknownField(
            //    input, unknownFields, extensionRegistry, tag)) {
              done = true;
            //}
            break;
          }
        }
      }
    } catch (java.io.IOException e) {
      throw new RuntimeException("StreamDecoder Input ProtocolBuffer Error!!!",e);
    //} finally {
    //  this.unknownFields = unknownFields.build();
    //  makeExtensionsImmutable();
    }
  }
  //public static final com.google.protobuf.Descriptors.Descriptor
  //    getDescriptor() {
  //  return Internal.internal_static_com_bt_rpc_internal_InputProto_descriptor;
  //}
  //
  //@Override
  //protected FieldAccessorTable
  //    internalGetFieldAccessorTable() {
  //  return Internal.internal_static_com_bt_rpc_internal_InputProto_fieldAccessorTable
  //      .ensureFieldAccessorsInitialized(
  //          InputProto.class, Builder.class);
  //}

  private int dataCase_ = 0;
  private Object data_;
  public enum DataCase {
    UTF8(2),
    BS(3),
    DATA_NOT_SET(0);
    private final int value;
    private DataCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static DataCase valueOf(int value) {
      return forNumber(value);
    }

    public static DataCase forNumber(int value) {
      switch (value) {
        case 2: return UTF8;
        case 3: return BS;
        case 0: return DATA_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public DataCase
  getDataCase() {
    return DataCase.forNumber(
        dataCase_);
  }

  public static final int E_FIELD_NUMBER = 1;
  private int e_;
  /**
   * <code>.tech.krpc.internal.SerialEnum e = 1;</code>
   * @return The enum numeric value on the wire for e.
   */
  @Override public int getEValue() {
    return e_;
  }
  /**
   * <code>.tech.krpc.internal.SerialEnum e = 1;</code>
   * @return The e.
   */
  @Override public SerialEnum getE() {
    @SuppressWarnings("deprecation")
    SerialEnum result = SerialEnum.forNumber(e_);
    return result == null ? SerialEnum.UNRECOGNIZED : result;
  }

  public static final int UTF8_FIELD_NUMBER = 2;
  /**
   * <pre>
   *for json , txt like serial
   * </pre>
   *
   * <code>string utf8 = 2;</code>
   * @return Whether the utf8 field is set.
   */
  public boolean hasUtf8() {
    return dataCase_ == 2;
  }
  /**
   * <pre>
   *for json , txt like serial
   * </pre>
   *
   * <code>string utf8 = 2;</code>
   * @return The utf8.
   */
  public String getUtf8() {
    if (dataCase_ == 2) {
      return (String)  data_;
    }
    return "";
  }

  public static final int BS_FIELD_NUMBER = 3;
  /**
   * <pre>
   * ByteString, others Serialization transfer by protobuf
   * </pre>
   *
   * <code>bytes bs = 3;</code>
   * @return Whether the bs field is set.
   */
  @Override
  public boolean hasBs() {
    return dataCase_ == BS_FIELD_NUMBER;
  }
  /**
   * <pre>
   * ByteString, others Serialization transfer by protobuf
   * </pre>
   *
   * <code>bytes bs = 3;</code>
   * @return The bs.
   */
  @Override
  public byte[] getBs() {
    if (dataCase_ == BS_FIELD_NUMBER) {
      return (byte[]) data_;
    }
    return MiniCodedInputStream.EMPTY_BYTE_ARRAY;
  }


  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Protobuf type {@code tech.krpc.internal.InputProto}
   */
  public static final class Builder
      //com.google.protobuf.GeneratedMessageV3.Builder<Builder>
          implements
      // @@protoc_insertion_point(builder_implements:tech.krpc.internal.InputProto)
      InputProtoOrBuilder.InBuilder {
    //public static final com.google.protobuf.Descriptors.Descriptor
    //    getDescriptor() {
    //  return Internal.internal_static_com_bt_rpc_internal_InputProto_descriptor;
    //}
    //
    //@Override
    //protected FieldAccessorTable
    //    internalGetFieldAccessorTable() {
    //  return Internal.internal_static_com_bt_rpc_internal_InputProto_fieldAccessorTable
    //      .ensureFieldAccessorsInitialized(
    //          InputProto.class, Builder.class);
    //}

    // Construct using tech.krpc.internal.InputProto.newBuilder()
    private Builder() {
    }

    public Builder clear() {
      e_ = 0;

      dataCase_ = 0;
      data_ = null;
      return this;
    }

    public InputProto build() {
      InputProto result = new InputProto();
      result.e_ = e_;
      if (dataCase_ == 2 || dataCase_ == 3) {
        result.data_ = data_;
      }
      result.dataCase_ = dataCase_;
      //onBuilt();
      return result;
    }


    private int dataCase_ = 0;
    private Object data_;
    public DataCase
        getDataCase() {
      return DataCase.forNumber(
          dataCase_);
    }

    public Builder clearData() {
      dataCase_ = 0;
      data_ = null;
      return this;
    }


    private int e_ = 0;

    public int getEValue(){
      return e_;
    }
    /**
     * <code>.tech.krpc.internal.SerialEnum e = 1;</code>
     * @param value The e to set.
     * @return This builder for chaining.
     */
    public Builder setE(SerialEnum value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      e_ = value.getNumber();
      //onChanged();
      return this;
    }
    /**
     * <code>.tech.krpc.internal.SerialEnum e = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearE() {
      e_ = 0;
      return this;
    }

    /**
     * <pre>
     *for json , txt like serial
     * </pre>
     *
     * <code>string utf8 = 2;</code>
     * @param value The utf8 to set.
     * @return This builder for chaining.
     */
    public Builder setUtf8(
            String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      dataCase_ = 2;
      data_ = value;
      return this;
    }
    /**
     * <pre>
     *for json , txt like serial
     * </pre>
     *
     * <code>string utf8 = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearUtf8() {
      if (dataCase_ == 2) {
        dataCase_ = 0;
        data_ = null;
      }
      return this;
    }

    /**
     * <pre>
     * ByteString, others Serialization transfer by protobuf
     * </pre>
     *
     * <code>bytes bs = 3;</code>
     * @return Whether the bs field is set.
     */
    public boolean hasBs() {
      return dataCase_ == 3;
    }
    /**
     * <pre>
     * ByteString, others Serialization transfer by protobuf
     * </pre>
     *
     * <code>bytes bs = 3;</code>
     * @param value The bs to set.
     * @return This builder for chaining.
     */
    public Builder setBs(byte[] value) {
      if (value == null) {
        throw new NullPointerException();
      }
      dataCase_ = 3;
      data_ = value;
      return this;
    }
    /**
     * <pre>
     * ByteString, others Serialization transfer by protobuf
     * </pre>
     *
     * <code>bytes bs = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearBs() {
      if (dataCase_ == 3) {
        dataCase_ = 0;
        data_ = null;
      }
      return this;
    }


    // @@protoc_insertion_point(builder_scope:tech.krpc.internal.InputProto)
  }


}

