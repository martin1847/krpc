// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "internal.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message InputProto
 */
export interface InputProto {
    /**
     * int32 e = 1; // default from SerialEnum.JSON = 0 , not allow modify
     *
     * @generated from protobuf field: string utf8 = 2;
     */
    utf8: string;
}
/**
 * @generated from protobuf message OutputProto
 */
export interface OutputProto {
    /**
     * google.rpc.Code  see https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
     *
     * @generated from protobuf field: int32 c = 1;
     */
    c: number; // detail  message if there is a error ,otherwise  null 
    // payload data , oneof  string or bytes
    /**
     * @generated from protobuf field: string m = 2;
     */
    m: string;
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "utf8";
        /**
         * @generated from protobuf field: string utf8 = 3;
         */
        utf8: string; // //for json , txt like serial
    } | {
        oneofKind: "bs";
        /**
         * @generated from protobuf field: bytes bs = 4;
         */
        bs: Uint8Array; // ByteString, others Serialization transfer by protobuf
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class InputProto$Type extends MessageType<InputProto> {
    constructor() {
        super("InputProto", [
            { no: 2, name: "utf8", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InputProto>): InputProto {
        const message = { utf8: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InputProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputProto): InputProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string utf8 */ 2:
                    message.utf8 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string utf8 = 2; */
        if (message.utf8 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.utf8);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputProto
 */
export const InputProto = new InputProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OutputProto$Type extends MessageType<OutputProto> {
    constructor() {
        super("OutputProto", [
            { no: 1, name: "c", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "m", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "utf8", kind: "scalar", oneof: "data", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bs", kind: "scalar", oneof: "data", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<OutputProto>): OutputProto {
        const message = { c: 0, m: "", data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OutputProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OutputProto): OutputProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 c */ 1:
                    message.c = reader.int32();
                    break;
                case /* string m */ 2:
                    message.m = reader.string();
                    break;
                case /* string utf8 */ 3:
                    message.data = {
                        oneofKind: "utf8",
                        utf8: reader.string()
                    };
                    break;
                case /* bytes bs */ 4:
                    message.data = {
                        oneofKind: "bs",
                        bs: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OutputProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 c = 1; */
        if (message.c !== 0)
            writer.tag(1, WireType.Varint).int32(message.c);
        /* string m = 2; */
        if (message.m !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.m);
        /* string utf8 = 3; */
        if (message.data.oneofKind === "utf8")
            writer.tag(3, WireType.LengthDelimited).string(message.data.utf8);
        /* bytes bs = 4; */
        if (message.data.oneofKind === "bs")
            writer.tag(4, WireType.LengthDelimited).bytes(message.data.bs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OutputProto
 */
export const OutputProto = new OutputProto$Type();
/**
 * @generated ServiceType for protobuf service Grpc
 */
export const Grpc = new ServiceType("Grpc", [
    { name: "call", options: {}, I: InputProto, O: OutputProto }
]);
