import java.text.SimpleDateFormat

task docker(type:Exec) {
    def DOCKER_REPO = "jcr.botaoyx.com/img"
    if(file('Dockerfile').exists()){
        def imgName = "${DOCKER_REPO}/${project.name}"
        def imaTag = "${version}_${new SimpleDateFormat("MMddHHmm").format(new Date())}"
        def cmd = "docker build   -t  $imgName:$imaTag -t $imgName:latest  ."
        //--build-arg DEPENDENCY=.
        commandLine cmd.split("\\s+")
    }else{
        commandLine "echo","Skip Docker Image Build."
    }
}

//
//task helmd(type:Exec) {
//    commandLine "helm", "del" , "$project.name"
//}

//task helmi(type:Exec) {
//    dependsOn "docker"
//    commandLine "helm upgrade --install --force --recreate-pods --namespace ${helmNamespace} $project.name ${file('src/main/helm')} --set ${helmConfig()}".split("\\s+")
//}
//
//task helmii(type:Exec) {
//    dependsOn "docker"
//    commandLine "helm install --namespace ${helmNamespace} --name $project.name --set ${helmConfig()}  ${file('src/main/helm')}".split("\\s+")
//}

//def helmConfig(){
//    def clusterName = "test-cluster"
//    try{
//        def hashStdOut = new ByteArrayOutputStream()
//        exec {
//            commandLine "kubectl", "config", "current-context"
//            standardOutput = hashStdOut
//        }
//        clusterName = hashStdOut.toString().trim()
//    }catch(e){
//        //e.printStackTrace()
//    }
//    //,service.type=NodePort
//    //deployment.image.pullPolicy=Always
//
//    """
//        deployment.replicas=1
//        cd.cluster=${clusterName}
//        resources.limits.cpu=500m
//        resources.limits.memory=2Gi
//        resources.requests.cpu=300m
//        resources.requests.memory=1024Mi
//        persistence.size=1Gi
//    """.trim().split("\\s+").join(",")
//}
//
task pushLatest(type:Exec) {
    dependsOn "docker"
    commandLine "docker", "push", "${DOCKER_REPO}/${project.name}:latest"
}

