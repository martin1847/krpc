
// GENERATED BY RPC GEN - LESS MODIFY BY HAND
// ${serviceFile} ${.now?iso_local}


import 'package:btrpc/btrpc.dart';
import '${dtoFile}';
export '${dtoFile}';

<#if service.description?has_content>
///  ${service.description}
</#if>
class ${service.name}Service extends BaseService {

	${service.name}Service(ClientChannel channel, ServiceConfig? config)
	  : super(channel, APP_NAME, '${service.name}', config);

<#list service.methods?filter(f->! f.hidden)  as m>
	${m.doc}
	Future<RpcResult<${m.dartRes()}>> ${m.name}(<#if m.arg??>${m.arg} req, </#if>{Map<String, String>? headers, Duration? timeout}) {
		   return call${m.res.cust?then('','0')}('${m.name}', <@fromJsonDto m.res/>
           <#if ! m.arg??> null <#else> <@argToJson m.arg/> </#if>, <@fromJsonList m.res /> );
	}

</#list>

}



<#macro fromJsonDto res>
<@compress single_line=true>
<#if res.cust><#if res.generic>(m) => ${res.rawType.name}.fromJson(m, <@fromJson res.generics[0] />) <#else>${res.rawType.name}.fromJson</#if> ,</#if>
</@compress>
</#macro>

<#macro fromJsonList res>
<@compress single_line=true>
headers: headers, timeout: timeout
<#if res.rawType.name == 'List'>, fromJson: (l) => BaseService.fromJsonList(l, <@fromJson res.generics[0] />)</#if>
</@compress>
</#macro>

<#macro argToJson arg>
<@compress single_line=true>
req<#if arg.generic && arg.cust >, toJson: (${arg} p)=>BaseService.defaultToJson(p.toJson(BaseService.identity))</#if>
</@compress>
</#macro>

<#macro fromJson propertyType>
<@compress single_line=true>
(o) => <#if propertyType.cust> ${propertyType}.fromJson(o as Map<String, dynamic>)<#else>o as ${propertyType}</#if>
</@compress>
</#macro>